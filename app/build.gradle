apply plugin: 'com.android.application'

android {
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    compileSdkVersion 30
    buildToolsVersion '30.0.2'


    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {

            resConfigs "en", "uk", "ru"

            /**
             * no Generate PNG
             */
            vectorDrawables {
                useSupportLibrary = true
            }

            // Enabling multidex support.
            multiDexEnabled true

            applicationId "com.walhalla.privacycleaner"
            minSdkVersion rootProject.minSdkVersion
            targetSdkVersion rootProject.targetSdkVersion

            versionCode code//+ ".0"+getTimestamp()
            versionName "1.3." + code + ".release"

            setProperty("archivesBaseName", "com.walhalla.privacycleaner")
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            //signingConfig signingConfigs.config
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    signingConfigs {

        debug {
//            storeFile file('D:\\android\\keystore\\debug.keystore')
//            storePassword 'android'
//            keyAlias = 'androiddebugkey'
//            keyPassword 'android'

            keyAlias 'gmailcleaner'
            keyPassword '@!sfuQ123zpc'
            storeFile file('D:/walhalla/sign/keystore.jks')
            storePassword '@!sfuQ123zpc'
        }

        release {
            keyAlias 'gmailcleaner'
            keyPassword '@!sfuQ123zpc'
            storeFile file('D:/walhalla/sign/keystore.jks')
            storePassword '@!sfuQ123zpc'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            //proguardFiles getDefaultProguardFile('proguard-android.txt'), "proguard-rules.pro"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
        }
        debug {
//            // to debug ProGuard rules
//            multiDexEnabled true
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'com.google.android.material:material:1.3.0-alpha04'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

//    implementation 'com.google.firebase:firebase-messaging:20.1.0'
//    implementation 'com.google.firebase:firebase-database:19.2.0'

    //implementation 'com.google.firebase:firebase-auth:16.0.3'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    //required lib for gmail/youtube

    implementation 'com.google.firebase:firebase-ads:19.5.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'pub.devrel:easypermissions:3.0.0'

//    implementation('com.google.apis:google-api-services-youtube:v3-rev99-1.17.0-rc') {
//        exclude group: 'org.apache.httpcomponents'
//    }

    //implementation 'androidx.multidex:multidex:2.0.1'

    //androidX
    implementation 'com.android.support:multidex:1.0.3'

    // https://mvnrepository.com/artifact/com.google.api-client/google-api-client-extensions
    //implementation group: 'com.google.api-client', name: 'google-api-client-extensions', version: '1.6.0-beta'

    //Gmail
    implementation 'com.google.android.gms:play-services-identity:17.0.0'
    implementation('com.google.api-client:google-api-client-android:1.30.10')
            {
                exclude group: 'org.apache.httpcomponents'
            }

    //Work Only in java module, not android
    //implementation 'com.google.api-client:google-api-client:1.26.0'

    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.31.0'
    implementation('com.google.apis:google-api-services-gmail:v1-rev98-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    //implementation project(path: ':desktop')
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'jp.wasabeef:recyclerview-animators:2.2.5'
    implementation 'com.skyfishjy.ripplebackground:library:1.0.1'
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'

    implementation project(path: ':ui')
    implementation project(path: ':threader')
    implementation 'androidx.preference:preference:1.1.1'
}

apply plugin: 'com.google.gms.google-services'
